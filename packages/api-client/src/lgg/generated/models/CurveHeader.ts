/* tslint:disable */
/* eslint-disable */
/**
 * Lakeshore Management API
 * API for Lakeshore Model240 temperature controller
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Coefficients } from './Coefficients';
import {
    CoefficientsFromJSON,
    CoefficientsFromJSONTyped,
    CoefficientsToJSON,
    CoefficientsToJSONTyped,
} from './Coefficients';
import type { CurveFormat } from './CurveFormat';
import {
    CurveFormatFromJSON,
    CurveFormatFromJSONTyped,
    CurveFormatToJSON,
    CurveFormatToJSONTyped,
} from './CurveFormat';

/**
 * Schema for curve header information containing metadata about a temperature sensor curve.
 * 
 * Used by GET /curve/{channel}/header endpoint to return curve configuration.
 * @export
 * @interface CurveHeader
 */
export interface CurveHeader {
    /**
     * 
     * @type {string}
     * @memberof CurveHeader
     */
    curveName: string;
    /**
     * 
     * @type {string}
     * @memberof CurveHeader
     */
    serialNumber: string;
    /**
     * 
     * @type {CurveFormat}
     * @memberof CurveHeader
     */
    curveDataFormat: CurveFormat;
    /**
     * 
     * @type {number}
     * @memberof CurveHeader
     */
    temperatureLimit: number;
    /**
     * 
     * @type {Coefficients}
     * @memberof CurveHeader
     */
    coefficient: Coefficients;
}



/**
 * Check if a given object implements the CurveHeader interface.
 */
export function instanceOfCurveHeader(value: object): value is CurveHeader {
    if (!('curveName' in value) || value['curveName'] === undefined) return false;
    if (!('serialNumber' in value) || value['serialNumber'] === undefined) return false;
    if (!('curveDataFormat' in value) || value['curveDataFormat'] === undefined) return false;
    if (!('temperatureLimit' in value) || value['temperatureLimit'] === undefined) return false;
    if (!('coefficient' in value) || value['coefficient'] === undefined) return false;
    return true;
}

export function CurveHeaderFromJSON(json: any): CurveHeader {
    return CurveHeaderFromJSONTyped(json, false);
}

export function CurveHeaderFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurveHeader {
    if (json == null) {
        return json;
    }
    return {
        
        'curveName': json['curveName'],
        'serialNumber': json['serialNumber'],
        'curveDataFormat': CurveFormatFromJSON(json['curveDataFormat']),
        'temperatureLimit': json['temperatureLimit'],
        'coefficient': CoefficientsFromJSON(json['coefficient']),
    };
}

export function CurveHeaderToJSON(json: any): CurveHeader {
    return CurveHeaderToJSONTyped(json, false);
}

export function CurveHeaderToJSONTyped(value?: CurveHeader | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'curveName': value['curveName'],
        'serialNumber': value['serialNumber'],
        'curveDataFormat': CurveFormatToJSON(value['curveDataFormat']),
        'temperatureLimit': value['temperatureLimit'],
        'coefficient': CoefficientsToJSON(value['coefficient']),
    };
}

