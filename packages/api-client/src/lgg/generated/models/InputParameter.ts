/* tslint:disable */
/* eslint-disable */
/**
 * Lakeshore Management API
 * API for Lakeshore Model240 temperature controller
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SensorTypes } from './SensorTypes';
import {
    SensorTypesFromJSON,
    SensorTypesFromJSONTyped,
    SensorTypesToJSON,
    SensorTypesToJSONTyped,
} from './SensorTypes';
import type { Units } from './Units';
import {
    UnitsFromJSON,
    UnitsFromJSONTyped,
    UnitsToJSON,
    UnitsToJSONTyped,
} from './Units';

/**
 * Schema for input channel configuration parameters.
 * 
 * Used by GET /input/{channel} endpoint to return channel settings.
 * All fields reflect the current configuration of the temperature input channel.
 * @export
 * @interface InputParameter
 */
export interface InputParameter {
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    sensorName?: string | null;
    /**
     * 
     * @type {SensorTypes}
     * @memberof InputParameter
     */
    sensorType: SensorTypes;
    /**
     * 
     * @type {Units}
     * @memberof InputParameter
     */
    temperatureUnit: Units;
    /**
     * 
     * @type {boolean}
     * @memberof InputParameter
     */
    autoRangeEnable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InputParameter
     */
    currentReversalEnable: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof InputParameter
     */
    inputEnable: boolean;
    /**
     * 
     * @type {number}
     * @memberof InputParameter
     */
    inputRange: number;
    /**
     * 
     * @type {string}
     * @memberof InputParameter
     */
    filter?: string | null;
}



/**
 * Check if a given object implements the InputParameter interface.
 */
export function instanceOfInputParameter(value: object): value is InputParameter {
    if (!('sensorType' in value) || value['sensorType'] === undefined) return false;
    if (!('temperatureUnit' in value) || value['temperatureUnit'] === undefined) return false;
    if (!('autoRangeEnable' in value) || value['autoRangeEnable'] === undefined) return false;
    if (!('currentReversalEnable' in value) || value['currentReversalEnable'] === undefined) return false;
    if (!('inputEnable' in value) || value['inputEnable'] === undefined) return false;
    if (!('inputRange' in value) || value['inputRange'] === undefined) return false;
    return true;
}

export function InputParameterFromJSON(json: any): InputParameter {
    return InputParameterFromJSONTyped(json, false);
}

export function InputParameterFromJSONTyped(json: any, ignoreDiscriminator: boolean): InputParameter {
    if (json == null) {
        return json;
    }
    return {
        
        'sensorName': json['sensorName'] == null ? undefined : json['sensorName'],
        'sensorType': SensorTypesFromJSON(json['sensorType']),
        'temperatureUnit': UnitsFromJSON(json['temperatureUnit']),
        'autoRangeEnable': json['autoRangeEnable'],
        'currentReversalEnable': json['currentReversalEnable'],
        'inputEnable': json['inputEnable'],
        'inputRange': json['inputRange'],
        'filter': json['filter'] == null ? undefined : json['filter'],
    };
}

export function InputParameterToJSON(json: any): InputParameter {
    return InputParameterToJSONTyped(json, false);
}

export function InputParameterToJSONTyped(value?: InputParameter | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sensorName': value['sensorName'],
        'sensorType': SensorTypesToJSON(value['sensorType']),
        'temperatureUnit': UnitsToJSON(value['temperatureUnit']),
        'autoRangeEnable': value['autoRangeEnable'],
        'currentReversalEnable': value['currentReversalEnable'],
        'inputEnable': value['inputEnable'],
        'inputRange': value['inputRange'],
        'filter': value['filter'],
    };
}

