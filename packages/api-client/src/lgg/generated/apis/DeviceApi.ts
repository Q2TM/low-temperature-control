/* tslint:disable */
/* eslint-disable */
/**
 * Lakeshore Management API
 * API for Lakeshore Model240 temperature controller
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Brightness,
  HTTPValidationError,
  IdentificationResp,
  OperationResult,
  StatusResp,
} from '../models/index';
import {
    BrightnessFromJSON,
    BrightnessToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    IdentificationRespFromJSON,
    IdentificationRespToJSON,
    OperationResultFromJSON,
    OperationResultToJSON,
    StatusRespFromJSON,
    StatusRespToJSON,
} from '../models/index';

export interface GetStatusRequest {
    channel: number;
}

export interface SetBrightnessRequest {
    brightness: number;
}

export interface SetModuleNameRequest {
    name: string;
}

/**
 * 
 */
export class DeviceApi extends runtime.BaseAPI {

    /**
     * Connect
     */
    async connectRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/connect`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Connect
     */
    async connect(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.connectRaw(initOverrides);
        return await response.value();
    }

    /**
     * Disconnect
     */
    async disconnectRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/disconnect`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Disconnect
     */
    async disconnect(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.disconnectRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Brightness
     */
    async getBrightnessRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Brightness>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/brightness`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BrightnessFromJSON(jsonValue));
    }

    /**
     * Get Brightness
     */
    async getBrightness(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Brightness> {
        const response = await this.getBrightnessRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Identification
     */
    async getIdentificationRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentificationResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/identification`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentificationRespFromJSON(jsonValue));
    }

    /**
     * Get Identification
     */
    async getIdentification(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentificationResp> {
        const response = await this.getIdentificationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Modname
     */
    async getModuleNameRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/module-name`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Modname
     */
    async getModuleName(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.getModuleNameRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Status
     */
    async getStatusRaw(requestParameters: GetStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResp>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling getStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/status/{channel}`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusRespFromJSON(jsonValue));
    }

    /**
     * Get Status
     */
    async getStatus(channel: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResp> {
        const response = await this.getStatusRaw({ channel: channel }, initOverrides);
        return await response.value();
    }

    /**
     * Set Brightness
     */
    async setBrightnessRaw(requestParameters: SetBrightnessRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['brightness'] == null) {
            throw new runtime.RequiredError(
                'brightness',
                'Required parameter "brightness" was null or undefined when calling setBrightness().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['brightness'] != null) {
            queryParameters['brightness'] = requestParameters['brightness'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/brightness`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Set Brightness
     */
    async setBrightness(brightness: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.setBrightnessRaw({ brightness: brightness }, initOverrides);
        return await response.value();
    }

    /**
     * Reset to factory defaults
     * Set Factory Defaults
     */
    async setFactoryDefaultsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/factory-defaults`;

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Reset to factory defaults
     * Set Factory Defaults
     */
    async setFactoryDefaults(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.setFactoryDefaultsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Set Modname
     */
    async setModuleNameRaw(requestParameters: SetModuleNameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['name'] == null) {
            throw new runtime.RequiredError(
                'name',
                'Required parameter "name" was null or undefined when calling setModuleName().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['name'] != null) {
            queryParameters['name'] = requestParameters['name'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/device/module-name`;

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Set Modname
     */
    async setModuleName(name: string, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.setModuleNameRaw({ name: name }, initOverrides);
        return await response.value();
    }

}
