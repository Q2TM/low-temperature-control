/* tslint:disable */
/* eslint-disable */
/**
 * Lakeshore Management API
 * API for Lakeshore Model240 temperature controller
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * Schema for device channel status information.
 * 
 * Used by GET /status/{channel} endpoint to return channel status flags.
 * @export
 * @interface StatusResp
 */
export interface StatusResp {
    /**
     * 
     * @type {boolean}
     * @memberof StatusResp
     */
    invalidReading: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StatusResp
     */
    tempUnderRange: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StatusResp
     */
    tempOverRange: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StatusResp
     */
    sensorUnitsOverRange: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof StatusResp
     */
    sensorUnitsUnderRange: boolean;
}

/**
 * Check if a given object implements the StatusResp interface.
 */
export function instanceOfStatusResp(value: object): value is StatusResp {
    if (!('invalidReading' in value) || value['invalidReading'] === undefined) return false;
    if (!('tempUnderRange' in value) || value['tempUnderRange'] === undefined) return false;
    if (!('tempOverRange' in value) || value['tempOverRange'] === undefined) return false;
    if (!('sensorUnitsOverRange' in value) || value['sensorUnitsOverRange'] === undefined) return false;
    if (!('sensorUnitsUnderRange' in value) || value['sensorUnitsUnderRange'] === undefined) return false;
    return true;
}

export function StatusRespFromJSON(json: any): StatusResp {
    return StatusRespFromJSONTyped(json, false);
}

export function StatusRespFromJSONTyped(json: any, ignoreDiscriminator: boolean): StatusResp {
    if (json == null) {
        return json;
    }
    return {
        
        'invalidReading': json['invalidReading'],
        'tempUnderRange': json['tempUnderRange'],
        'tempOverRange': json['tempOverRange'],
        'sensorUnitsOverRange': json['sensorUnitsOverRange'],
        'sensorUnitsUnderRange': json['sensorUnitsUnderRange'],
    };
}

export function StatusRespToJSON(json: any): StatusResp {
    return StatusRespToJSONTyped(json, false);
}

export function StatusRespToJSONTyped(value?: StatusResp | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'invalidReading': value['invalidReading'],
        'tempUnderRange': value['tempUnderRange'],
        'tempOverRange': value['tempOverRange'],
        'sensorUnitsOverRange': value['sensorUnitsOverRange'],
        'sensorUnitsUnderRange': value['sensorUnitsUnderRange'],
    };
}

