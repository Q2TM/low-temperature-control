/* tslint:disable */
/* eslint-disable */
/**
 * Lakeshore Management API
 * API for Lakeshore Model240 temperature controller
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  InputParameter,
  MonitorResp,
  OperationResult,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InputParameterFromJSON,
    InputParameterToJSON,
    MonitorRespFromJSON,
    MonitorRespToJSON,
    OperationResultFromJSON,
    OperationResultToJSON,
} from '../models/index';

export interface GetInputParameterRequest {
    channel: number;
}

export interface GetMonitorRequest {
    channel: number;
}

export interface SetInputParameterRequest {
    channel: number;
    inputParameter: InputParameter;
}

/**
 * 
 */
export class ReadingApi extends runtime.BaseAPI {

    /**
     * Get Input Parameter
     */
    async getInputParameterRaw(requestParameters: GetInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InputParameter>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling getInputParameter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/reading/input/{channel}`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InputParameterFromJSON(jsonValue));
    }

    /**
     * Get Input Parameter
     */
    async getInputParameter(channel: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InputParameter> {
        const response = await this.getInputParameterRaw({ channel: channel }, initOverrides);
        return await response.value();
    }

    /**
     * Get Monitor
     */
    async getMonitorRaw(requestParameters: GetMonitorRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MonitorResp>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling getMonitor().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/reading/monitor/{channel}`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MonitorRespFromJSON(jsonValue));
    }

    /**
     * Get Monitor
     */
    async getMonitor(channel: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MonitorResp> {
        const response = await this.getMonitorRaw({ channel: channel }, initOverrides);
        return await response.value();
    }

    /**
     * Set Input Config
     */
    async setInputParameterRaw(requestParameters: SetInputParameterRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling setInputParameter().'
            );
        }

        if (requestParameters['inputParameter'] == null) {
            throw new runtime.RequiredError(
                'inputParameter',
                'Required parameter "inputParameter" was null or undefined when calling setInputParameter().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/reading/input/{channel}`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InputParameterToJSON(requestParameters['inputParameter']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Set Input Config
     */
    async setInputParameter(channel: number, inputParameter: InputParameter, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.setInputParameterRaw({ channel: channel, inputParameter: inputParameter }, initOverrides);
        return await response.value();
    }

}
