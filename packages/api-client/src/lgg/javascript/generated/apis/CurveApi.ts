/* tslint:disable */
/* eslint-disable */
/**
 * Lakeshore Management API
 * API for Lakeshore Model240 temperature controller
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CurveDataPoint,
  CurveDataPoints,
  CurveHeader,
  HTTPValidationError,
  OperationResult,
} from '../models/index';
import {
    CurveDataPointFromJSON,
    CurveDataPointToJSON,
    CurveDataPointsFromJSON,
    CurveDataPointsToJSON,
    CurveHeaderFromJSON,
    CurveHeaderToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    OperationResultFromJSON,
    OperationResultToJSON,
} from '../models/index';

export interface DeleteCurveRequest {
    channel: number;
}

export interface GetAllCurveDataPointsRequest {
    channel: number;
}

export interface GetCurveDataPointRequest {
    channel: number;
    index: number;
}

export interface GetCurveHeaderRequest {
    channel: number;
}

export interface SetCurveDataPointRequest {
    channel: number;
    index: number;
    curveDataPoint: CurveDataPoint;
}

export interface SetCurveHeaderRequest {
    channel: number;
    curveHeader: CurveHeader;
}

/**
 * 
 */
export class CurveApi extends runtime.BaseAPI {

    /**
     * Delete Curve
     */
    async deleteCurveRaw(requestParameters: DeleteCurveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling deleteCurve().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/curve/{channel}`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Delete Curve
     */
    async deleteCurve(channel: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.deleteCurveRaw({ channel: channel }, initOverrides);
        return await response.value();
    }

    /**
     * Get Curve Data Points
     */
    async getAllCurveDataPointsRaw(requestParameters: GetAllCurveDataPointsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurveDataPoints>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling getAllCurveDataPoints().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/curve/{channel}/data-points`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurveDataPointsFromJSON(jsonValue));
    }

    /**
     * Get Curve Data Points
     */
    async getAllCurveDataPoints(channel: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurveDataPoints> {
        const response = await this.getAllCurveDataPointsRaw({ channel: channel }, initOverrides);
        return await response.value();
    }

    /**
     * Get Curve Data Point
     */
    async getCurveDataPointRaw(requestParameters: GetCurveDataPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurveDataPoint>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling getCurveDataPoint().'
            );
        }

        if (requestParameters['index'] == null) {
            throw new runtime.RequiredError(
                'index',
                'Required parameter "index" was null or undefined when calling getCurveDataPoint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/curve/{channel}/data-point/{index}`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));
        urlPath = urlPath.replace(`{${"index"}}`, encodeURIComponent(String(requestParameters['index'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurveDataPointFromJSON(jsonValue));
    }

    /**
     * Get Curve Data Point
     */
    async getCurveDataPoint(channel: number, index: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurveDataPoint> {
        const response = await this.getCurveDataPointRaw({ channel: channel, index: index }, initOverrides);
        return await response.value();
    }

    /**
     * Get Curve Header
     */
    async getCurveHeaderRaw(requestParameters: GetCurveHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CurveHeader>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling getCurveHeader().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/v1/curve/{channel}/header`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CurveHeaderFromJSON(jsonValue));
    }

    /**
     * Get Curve Header
     */
    async getCurveHeader(channel: number, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CurveHeader> {
        const response = await this.getCurveHeaderRaw({ channel: channel }, initOverrides);
        return await response.value();
    }

    /**
     * Set Curve Data Point
     */
    async setCurveDataPointRaw(requestParameters: SetCurveDataPointRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling setCurveDataPoint().'
            );
        }

        if (requestParameters['index'] == null) {
            throw new runtime.RequiredError(
                'index',
                'Required parameter "index" was null or undefined when calling setCurveDataPoint().'
            );
        }

        if (requestParameters['curveDataPoint'] == null) {
            throw new runtime.RequiredError(
                'curveDataPoint',
                'Required parameter "curveDataPoint" was null or undefined when calling setCurveDataPoint().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/curve/{channel}/data-point/{index}`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));
        urlPath = urlPath.replace(`{${"index"}}`, encodeURIComponent(String(requestParameters['index'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CurveDataPointToJSON(requestParameters['curveDataPoint']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Set Curve Data Point
     */
    async setCurveDataPoint(channel: number, index: number, curveDataPoint: CurveDataPoint, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.setCurveDataPointRaw({ channel: channel, index: index, curveDataPoint: curveDataPoint }, initOverrides);
        return await response.value();
    }

    /**
     * Set Curve Header
     */
    async setCurveHeaderRaw(requestParameters: SetCurveHeaderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['channel'] == null) {
            throw new runtime.RequiredError(
                'channel',
                'Required parameter "channel" was null or undefined when calling setCurveHeader().'
            );
        }

        if (requestParameters['curveHeader'] == null) {
            throw new runtime.RequiredError(
                'curveHeader',
                'Required parameter "curveHeader" was null or undefined when calling setCurveHeader().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';


        let urlPath = `/api/v1/curve/{channel}/header`;
        urlPath = urlPath.replace(`{${"channel"}}`, encodeURIComponent(String(requestParameters['channel'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CurveHeaderToJSON(requestParameters['curveHeader']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OperationResultFromJSON(jsonValue));
    }

    /**
     * Set Curve Header
     */
    async setCurveHeader(channel: number, curveHeader: CurveHeader, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OperationResult> {
        const response = await this.setCurveHeaderRaw({ channel: channel, curveHeader: curveHeader }, initOverrides);
        return await response.value();
    }

}
