# coding: utf-8

"""
    Lakeshore Management API

    API for Lakeshore Model240 temperature controller

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from lgg_client.models.sensor_types import SensorTypes
from lgg_client.models.units import Units
from typing import Optional, Set
from typing_extensions import Self

class InputParameter(BaseModel):
    """
    Schema for input channel configuration parameters.  Used by GET /input/{channel} endpoint to return channel settings. All fields reflect the current configuration of the temperature input channel.
    """ # noqa: E501
    sensor_name: Optional[StrictStr] = Field(default=None, alias="sensorName")
    sensor_type: SensorTypes = Field(alias="sensorType")
    temperature_unit: Units = Field(alias="temperatureUnit")
    auto_range_enable: StrictBool = Field(alias="autoRangeEnable")
    current_reversal_enable: StrictBool = Field(alias="currentReversalEnable")
    input_enable: StrictBool = Field(alias="inputEnable")
    input_range: StrictInt = Field(alias="inputRange")
    filter: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["sensorName", "sensorType", "temperatureUnit", "autoRangeEnable", "currentReversalEnable", "inputEnable", "inputRange", "filter"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InputParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if sensor_name (nullable) is None
        # and model_fields_set contains the field
        if self.sensor_name is None and "sensor_name" in self.model_fields_set:
            _dict['sensorName'] = None

        # set to None if filter (nullable) is None
        # and model_fields_set contains the field
        if self.filter is None and "filter" in self.model_fields_set:
            _dict['filter'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InputParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "sensorName": obj.get("sensorName"),
            "sensorType": obj.get("sensorType"),
            "temperatureUnit": obj.get("temperatureUnit"),
            "autoRangeEnable": obj.get("autoRangeEnable"),
            "currentReversalEnable": obj.get("currentReversalEnable"),
            "inputEnable": obj.get("inputEnable"),
            "inputRange": obj.get("inputRange"),
            "filter": obj.get("filter")
        })
        return _obj


