/* tslint:disable */
/* eslint-disable */
/**
 * Elysia Documentation
 * Development documentation
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetMetrics200Response,
  GetMetrics500Response,
  GetMetricsTimeEndParameter,
  GetMetricsTimeStartParameter,
} from '../models/index';
import {
    GetMetrics200ResponseFromJSON,
    GetMetrics200ResponseToJSON,
    GetMetrics500ResponseFromJSON,
    GetMetrics500ResponseToJSON,
    GetMetricsTimeEndParameterFromJSON,
    GetMetricsTimeEndParameterToJSON,
    GetMetricsTimeStartParameterFromJSON,
    GetMetricsTimeStartParameterToJSON,
} from '../models/index';

export interface GetMetricsRequest {
    instanceName: string;
    interval: number;
    channels: Array<number>;
    timeStart: GetMetricsTimeStartParameter;
    timeEnd: GetMetricsTimeEndParameter;
}

/**
 * 
 */
export class QueryApi extends runtime.BaseAPI {

    /**
     * Query metrics data from time series database
     * Get Metrics
     */
    async getMetricsRaw(requestParameters: GetMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMetrics200Response>> {
        if (requestParameters['instanceName'] == null) {
            throw new runtime.RequiredError(
                'instanceName',
                'Required parameter "instanceName" was null or undefined when calling getMetrics().'
            );
        }

        if (requestParameters['interval'] == null) {
            throw new runtime.RequiredError(
                'interval',
                'Required parameter "interval" was null or undefined when calling getMetrics().'
            );
        }

        if (requestParameters['channels'] == null) {
            throw new runtime.RequiredError(
                'channels',
                'Required parameter "channels" was null or undefined when calling getMetrics().'
            );
        }

        if (requestParameters['timeStart'] == null) {
            throw new runtime.RequiredError(
                'timeStart',
                'Required parameter "timeStart" was null or undefined when calling getMetrics().'
            );
        }

        if (requestParameters['timeEnd'] == null) {
            throw new runtime.RequiredError(
                'timeEnd',
                'Required parameter "timeEnd" was null or undefined when calling getMetrics().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['interval'] != null) {
            queryParameters['interval'] = requestParameters['interval'];
        }

        if (requestParameters['channels'] != null) {
            queryParameters['channels'] = requestParameters['channels'];
        }

        if (requestParameters['timeStart'] != null) {
            queryParameters['time_start'] = requestParameters['timeStart'];
        }

        if (requestParameters['timeEnd'] != null) {
            queryParameters['time_end'] = requestParameters['timeEnd'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/query/{instance_name}`;
        urlPath = urlPath.replace(`{${"instance_name"}}`, encodeURIComponent(String(requestParameters['instanceName'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMetrics200ResponseFromJSON(jsonValue));
    }

    /**
     * Query metrics data from time series database
     * Get Metrics
     */
    async getMetrics(instanceName: string, interval: number, channels: Array<number>, timeStart: GetMetricsTimeStartParameter, timeEnd: GetMetricsTimeEndParameter, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMetrics200Response> {
        const response = await this.getMetricsRaw({ instanceName: instanceName, interval: interval, channels: channels, timeStart: timeStart, timeEnd: timeEnd }, initOverrides);
        return await response.value();
    }

}
